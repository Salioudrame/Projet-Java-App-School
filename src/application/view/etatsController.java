package application.view;

import java.net.URL;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.LocalDate;
import java.util.Optional;
import java.util.ResourceBundle;

import application.model.Paiement;
import application.model.Utilisateur;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.input.MouseEvent;
import javafx.stage.Stage;
import javafx.scene.control.TableView;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.Button;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.control.Alert;
import javafx.scene.control.ButtonType;
import javafx.scene.control.TableColumn;

public class etatsController implements Initializable{
	@FXML
	private TableView<Paiement> dayPaiementTable;
	@FXML
	private TableColumn<Paiement,Integer> idPayementColumn;
	@FXML
	private TableColumn<Paiement,Date> datePayementColumn;
	@FXML
	private TableColumn<Paiement,Integer> montantColumn;
	@FXML
	private Button deleteButton;

	// Event Listener on TableView[#dayPaiementTable].onMouseClicked
	@FXML
	public void selectRow(MouseEvent event) {
		// TODO Autogenerated
	}
	// Event Listener on Button.onMouseClicked
	
	@FXML
	public void deleteDayPaiement(MouseEvent event) {
		String sql = "DELETE FROM payement WHERE idPayement= ?";
        
        
        
        
			try {
            Connection connection = DataBaseConnection.getConnection();
            PreparedStatement statement = connection.prepareStatement(sql);
            Paiement selectedPaiement = dayPaiementTable.getSelectionModel().getSelectedItem();
            
            
            if(selectedPaiement == null) {
            	Alert alert =new Alert(Alert.AlertType.ERROR);
            	alert.setTitle("aucun paiement n'a été selectionné");
            	alert.setContentText("Veuillez selectionner un paiement");
            	alert.setHeaderText("Aucun paiement n'a été selectionné");
            	alert.showAndWait();
            	
            }else {
            	statement.setInt(1, selectedPaiement.getIdPaiement());
            	Alert alert = new Alert(AlertType.CONFIRMATION);
      	      	alert.setTitle("suppression");
      	      	alert.setHeaderText("Etes vous sur de vouloir annuler le paiement ?");
      	      	//@SuppressWarnings("unused")
				Stage stage=(Stage) deleteButton.getScene().getWindow();
      		
      		
      	      	Optional<ButtonType> result =alert.showAndWait();
                if(result.isPresent() && result.get() == ButtonType.OK) {
                
                statement.execute();
                int rowsDeleted = statement.executeUpdate();
                if (rowsDeleted > 0) {
                    Alert alerte = new Alert(AlertType.INFORMATION);
                    alerte.setTitle("suppression réussi");
                    alerte.setHeaderText("");
                    alerte.setContentText("La suppression a bien ete effectuée ");
                    alerte.showAndWait();
                    new TableView();
                    
                }
                refreshTablePaiement();
               }
            }     
        } catch (SQLException var16) {
            var16.printStackTrace();
        }
		  

	}
	public void refreshTablePaiement() {
		LocalDate today=LocalDate.now();
		String sql1 = "SELECT * from payement WHERE datePayement = '"+today+"'  ";
        
		try {
			Connection connection = DataBaseConnection.getConnection();
			Statement statement = connection.createStatement();
            ResultSet resultSet = statement.executeQuery(sql1);
            ObservableList<Paiement> paiements = FXCollections.observableArrayList();

            while(resultSet.next()) { 
            	int idPaiement=resultSet.getInt("idPayement");
            	Date datePaiement = resultSet.getDate("datePayement");
                int montant = resultSet.getInt("montant");
                
                paiements.add(new Paiement(idPaiement, datePaiement, montant));
            }

            this.dayPaiementTable.setItems(paiements);
            this.idPayementColumn.setCellValueFactory(new PropertyValueFactory<>("idPaiement"));
            this.datePayementColumn.setCellValueFactory(new PropertyValueFactory<>("datePayement"));
            this.montantColumn.setCellValueFactory(new PropertyValueFactory<>("montant"));
            

		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}


	}
	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		// TODO Auto-generated method stub
		try {
			this.showPaiementToday();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	private void showPaiementToday() throws Exception 
	{
    	 LocalDate today=LocalDate.now();
		 String sql1 = "SELECT * from payement WHERE datePayement = '"+today+"'  ";
	            
				try {
					
					Connection connection = DataBaseConnection.getConnection();
					Statement statement = connection.createStatement();
		            ResultSet resultSet = statement.executeQuery(sql1);
		            ObservableList<Paiement> paiements = FXCollections.observableArrayList();

		            while(resultSet.next()) {
		            	int idPaiement=resultSet.getInt("idPayement");
		                Date datePayement = resultSet.getDate("datePayement");
		                int montant = resultSet.getInt("montant"); 
		                
		                paiements.add(new Paiement(idPaiement, datePayement, montant));
		            }

		            this.dayPaiementTable.setItems(paiements);
		            this.idPayementColumn.setCellValueFactory(new PropertyValueFactory<>("idPaiement"));
		            this.datePayementColumn.setCellValueFactory(new PropertyValueFactory<>("datePayement"));
		            this.montantColumn.setCellValueFactory(new PropertyValueFactory<>("montant"));
		           
				} catch (Exception e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
	            	        
	}

}
